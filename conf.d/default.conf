# ---------- upstreams ----------
upstream oauth2_upstream {
	server oauth2-proxy:4180;
}

# ---------- WebSocket support ----------
map $http_upgrade $connection_upgrade {
	default upgrade;
	''      close;
}

# ---------- HTTPS configuration ----------
server {
	listen 443 ssl;
	
	ssl_certificate     /etc/local.crt;
	ssl_certificate_key /etc/local.key;
	# ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
	# ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;
	
	# Always tell upstreams the original scheme/host/client IP
	proxy_set_header Host               $host;
	proxy_set_header X-Real-IP          $remote_addr;
	proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
	proxy_set_header X-Forwarded-Host   $host;
	proxy_set_header X-Forwarded-Proto  $scheme;
	
	# Bypass auth for static/public paths
	location ~ ^/(api|health|images|js|css|fonts|sounds|codemirror|manifest.webmanifest)(/|$) {
		proxy_pass http://backend;
	}
	
	# ---- the auth subrequest for protected routes ----
	location = /oauth2/auth {
		internal;
		proxy_pass http://oauth2_upstream;
		proxy_set_header Host              $host;
		proxy_set_header X-Original-URI    $request_uri;
		proxy_set_header X-Real-IP         $remote_addr;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_set_header X-Forwarded-Uri   $request_uri;
		proxy_pass_request_body off; # /auth only needs headers
		proxy_set_header Content-Length ""; 
	}
	
	# ---- proxy the oauth2-proxy app endpoints (/oauth2/*) ----
	# These handle sign_in/start/callback, cookie setting, etc.
	location /oauth2/ {
		proxy_pass http://oauth2_upstream;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-Proto $scheme;
	}
	
	# ---- your protected app ----
	location / {
		set $return_to "$scheme://$http_host$uri$is_args$args";
		
		# Check auth first
		auth_request /oauth2/auth;
		
		# If auth says 401, send user into the signin flow with return-to
		error_page 401 = @oauth2_signin;
		
		proxy_set_header Host               $host;
		proxy_set_header X-Real-IP          $remote_addr;
		proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Host   $host;
		proxy_set_header X-Forwarded-Proto  $scheme;
		
		# hoist identity headers from the subrequest to the app
		auth_request_set $user   $upstream_http_x_auth_request_user;
		auth_request_set $email  $upstream_http_x_auth_request_email;
		auth_request_set $groups $upstream_http_x_auth_request_groups;
		auth_request_set $authz  $upstream_http_authorization;
		
		proxy_set_header X-Auth-Request-User   $user;
		proxy_set_header X-Auth-Request-Email  $email;
		proxy_set_header X-Auth-Request-Groups $groups;
		proxy_set_header Authorization         $authz;
		
		# Support for WebSockets
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection $connection_upgrade;
		proxy_read_timeout 30s;
		proxy_send_timeout 30s;
		
		# Pass along to xyOps
		proxy_pass http://backend;
	}
	
	# Centralized redirect to login (preserves original URL)
	location @oauth2_signin {
		return 302 /oauth2/start?rd=$return_to;
	}
	
}
